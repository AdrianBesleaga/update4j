/*
 * Copyright 2018 Mordechai Meisels
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.update4j.binding;

import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.List;

import javax.xml.bind.DataBindingException;
import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;

import org.update4j.Property;

/*
 * Everything that can be replaced by a property should be stored as strings.
 * Resolve them in Configuration::read.
 */
@XmlRootElement(name = "configuration")
@XmlAccessorType(XmlAccessType.FIELD)
public class ConfigBinding {

	/*
	 * I can use an XmlAdapter, but anyway I parse everything in
	 * Configuration::read, so no need.
	 */
	@XmlAttribute
	public String timestamp;

	@XmlElement
	public BaseBinding base;

	@XmlElement
	public ProviderBinding provider;

	@XmlElementWrapper
	@XmlElement(name = "property")
	public List<Property> properties;

	@XmlElementWrapper
	@XmlElement(name = "library")
	public List<LibraryBinding> libraries;

	public static ConfigBinding read(Reader reader) throws IOException {
		try {
			return JAXB.unmarshal(reader, ConfigBinding.class);
		} catch (DataBindingException e) {
			if (e.getCause() instanceof IOException) {
				throw (IOException) e.getCause();
			}

			throw new IOException(e);
		}

	}

	public void write(Writer writer) throws IOException {

		/*
		 * https://stackoverflow.com/a/16959146/1751640
		 */
		writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n");
		writer.write("<!-- Generated by update4j. Licensed under Apache Software License 2.0 -->\n");

		try {
			JAXBContext jc = JAXBContext.newInstance(ConfigBinding.class);

			Marshaller marshaller = jc.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);
			marshaller.marshal(this, writer);
		} catch (DataBindingException e) {
			if (e.getCause() instanceof IOException) {
				throw (IOException) e.getCause();
			}

			throw new IOException(e);
		} catch (JAXBException e) {
			throw new IOException(e);
		}

		//	JAXB.marshal(configBinding, writer);
	}

}
